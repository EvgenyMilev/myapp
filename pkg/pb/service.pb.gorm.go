// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: github.com/myapp/pkg/pb/service.proto

// Generated with protoc-gen-gorm version: master
// Anticipating compatibility with atlas-app-toolkit version: master

/*
Package pb is a generated protocol buffer package.

It is generated from these files:
	github.com/myapp/pkg/pb/service.proto

It has these top-level messages:
	Genre
	Book
	CreateBookRequest
	CreateBookResponse
	ReadBookRequest
	ReadBookResponse
	UpdateBookRequest
	UpdateBookResponse
	ListBookRequest
	ListBookResponse
	DeleteBookRequest
	DeleteBookResponse
	VersionResponse
*/
package pb

import context "context"
import fmt "fmt"

import errors1 "github.com/infobloxopen/protoc-gen-gorm/errors"
import field_mask1 "google.golang.org/genproto/protobuf/field_mask"
import gorm1 "github.com/jinzhu/gorm"
import gorm2 "github.com/infobloxopen/atlas-app-toolkit/gorm"
import query1 "github.com/infobloxopen/atlas-app-toolkit/query"

import math "math"
import google_protobuf "github.com/golang/protobuf/ptypes/empty"
import _ "google.golang.org/genproto/googleapis/api/annotations"
import _ "github.com/envoyproxy/protoc-gen-validate/validate"
import _ "github.com/grpc-ecosystem/grpc-gateway/protoc-gen-swagger/options"
import _ "github.com/infobloxopen/atlas-app-toolkit/query"
import _ "google.golang.org/genproto/protobuf/field_mask"
import _ "github.com/infobloxopen/protoc-gen-atlas-query-validate/options"
import _ "github.com/infobloxopen/protoc-gen-atlas-validate/options"

// Reference imports to suppress errors if they are not otherwise used.
var _ = fmt.Errorf
var _ = math.Inf

type GenreORM struct {
	Id   int32 `gorm:"type:serial;primary_key"`
	Name string
}

// TableName overrides the default tablename generated by GORM
func (GenreORM) TableName() string {
	return "genres"
}

// ToORM runs the BeforeToORM hook if present, converts the fields of this
// object to ORM format, runs the AfterToORM hook, then returns the ORM object
func (m *Genre) ToORM(ctx context.Context) (GenreORM, error) {
	to := GenreORM{}
	var err error
	if prehook, ok := interface{}(m).(GenreWithBeforeToORM); ok {
		if err = prehook.BeforeToORM(ctx, &to); err != nil {
			return to, err
		}
	}
	to.Id = m.Id
	to.Name = m.Name
	if posthook, ok := interface{}(m).(GenreWithAfterToORM); ok {
		err = posthook.AfterToORM(ctx, &to)
	}
	return to, err
}

// ToPB runs the BeforeToPB hook if present, converts the fields of this
// object to PB format, runs the AfterToPB hook, then returns the PB object
func (m *GenreORM) ToPB(ctx context.Context) (Genre, error) {
	to := Genre{}
	var err error
	if prehook, ok := interface{}(m).(GenreWithBeforeToPB); ok {
		if err = prehook.BeforeToPB(ctx, &to); err != nil {
			return to, err
		}
	}
	to.Id = m.Id
	to.Name = m.Name
	if posthook, ok := interface{}(m).(GenreWithAfterToPB); ok {
		err = posthook.AfterToPB(ctx, &to)
	}
	return to, err
}

// The following are interfaces you can implement for special behavior during ORM/PB conversions
// of type Genre the arg will be the target, the caller the one being converted from

// GenreBeforeToORM called before default ToORM code
type GenreWithBeforeToORM interface {
	BeforeToORM(context.Context, *GenreORM) error
}

// GenreAfterToORM called after default ToORM code
type GenreWithAfterToORM interface {
	AfterToORM(context.Context, *GenreORM) error
}

// GenreBeforeToPB called before default ToPB code
type GenreWithBeforeToPB interface {
	BeforeToPB(context.Context, *Genre) error
}

// GenreAfterToPB called after default ToPB code
type GenreWithAfterToPB interface {
	AfterToPB(context.Context, *Genre) error
}

type BookORM struct {
	Amount int32
	Genre  int32 `gorm:"type:integer"`
	Id     int32 `gorm:"type:serial;primary_key"`
	Name   string
	Price  float32
}

// TableName overrides the default tablename generated by GORM
func (BookORM) TableName() string {
	return "books"
}

// ToORM runs the BeforeToORM hook if present, converts the fields of this
// object to ORM format, runs the AfterToORM hook, then returns the ORM object
func (m *Book) ToORM(ctx context.Context) (BookORM, error) {
	to := BookORM{}
	var err error
	if prehook, ok := interface{}(m).(BookWithBeforeToORM); ok {
		if err = prehook.BeforeToORM(ctx, &to); err != nil {
			return to, err
		}
	}
	to.Id = m.Id
	to.Name = m.Name
	to.Price = m.Price
	to.Genre = m.Genre
	to.Amount = m.Amount
	if posthook, ok := interface{}(m).(BookWithAfterToORM); ok {
		err = posthook.AfterToORM(ctx, &to)
	}
	return to, err
}

// ToPB runs the BeforeToPB hook if present, converts the fields of this
// object to PB format, runs the AfterToPB hook, then returns the PB object
func (m *BookORM) ToPB(ctx context.Context) (Book, error) {
	to := Book{}
	var err error
	if prehook, ok := interface{}(m).(BookWithBeforeToPB); ok {
		if err = prehook.BeforeToPB(ctx, &to); err != nil {
			return to, err
		}
	}
	to.Id = m.Id
	to.Name = m.Name
	to.Price = m.Price
	to.Genre = m.Genre
	to.Amount = m.Amount
	if posthook, ok := interface{}(m).(BookWithAfterToPB); ok {
		err = posthook.AfterToPB(ctx, &to)
	}
	return to, err
}

// The following are interfaces you can implement for special behavior during ORM/PB conversions
// of type Book the arg will be the target, the caller the one being converted from

// BookBeforeToORM called before default ToORM code
type BookWithBeforeToORM interface {
	BeforeToORM(context.Context, *BookORM) error
}

// BookAfterToORM called after default ToORM code
type BookWithAfterToORM interface {
	AfterToORM(context.Context, *BookORM) error
}

// BookBeforeToPB called before default ToPB code
type BookWithBeforeToPB interface {
	BeforeToPB(context.Context, *Book) error
}

// BookAfterToPB called after default ToPB code
type BookWithAfterToPB interface {
	AfterToPB(context.Context, *Book) error
}

// DefaultCreateGenre executes a basic gorm create call
func DefaultCreateGenre(ctx context.Context, in *Genre, db *gorm1.DB) (*Genre, error) {
	if in == nil {
		return nil, errors1.NilArgumentError
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(GenreORMWithBeforeCreate_); ok {
		if db, err = hook.BeforeCreate_(ctx, db); err != nil {
			return nil, err
		}
	}
	if err = db.Create(&ormObj).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(GenreORMWithAfterCreate_); ok {
		if err = hook.AfterCreate_(ctx, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := ormObj.ToPB(ctx)
	return &pbResponse, err
}

type GenreORMWithBeforeCreate_ interface {
	BeforeCreate_(context.Context, *gorm1.DB) (*gorm1.DB, error)
}
type GenreORMWithAfterCreate_ interface {
	AfterCreate_(context.Context, *gorm1.DB) error
}

// DefaultReadGenre executes a basic gorm read call
func DefaultReadGenre(ctx context.Context, in *Genre, db *gorm1.DB) (*Genre, error) {
	if in == nil {
		return nil, errors1.NilArgumentError
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	if ormObj.Id == 0 {
		return nil, errors1.EmptyIdError
	}
	if hook, ok := interface{}(&ormObj).(GenreORMWithBeforeReadApplyQuery); ok {
		if db, err = hook.BeforeReadApplyQuery(ctx, db); err != nil {
			return nil, err
		}
	}
	if db, err = gorm2.ApplyFieldSelection(ctx, db, nil, &GenreORM{}); err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(GenreORMWithBeforeReadFind); ok {
		if db, err = hook.BeforeReadFind(ctx, db); err != nil {
			return nil, err
		}
	}
	ormResponse := GenreORM{}
	if err = db.Where(&ormObj).First(&ormResponse).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormResponse).(GenreORMWithAfterReadFind); ok {
		if err = hook.AfterReadFind(ctx, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := ormResponse.ToPB(ctx)
	return &pbResponse, err
}

type GenreORMWithBeforeReadApplyQuery interface {
	BeforeReadApplyQuery(context.Context, *gorm1.DB) (*gorm1.DB, error)
}
type GenreORMWithBeforeReadFind interface {
	BeforeReadFind(context.Context, *gorm1.DB) (*gorm1.DB, error)
}
type GenreORMWithAfterReadFind interface {
	AfterReadFind(context.Context, *gorm1.DB) error
}

func DefaultDeleteGenre(ctx context.Context, in *Genre, db *gorm1.DB) error {
	if in == nil {
		return errors1.NilArgumentError
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return err
	}
	if ormObj.Id == 0 {
		return errors1.EmptyIdError
	}
	if hook, ok := interface{}(&ormObj).(GenreORMWithBeforeDelete_); ok {
		if db, err = hook.BeforeDelete_(ctx, db); err != nil {
			return err
		}
	}
	err = db.Where(&ormObj).Delete(&GenreORM{}).Error
	if err != nil {
		return err
	}
	if hook, ok := interface{}(&ormObj).(GenreORMWithAfterDelete_); ok {
		err = hook.AfterDelete_(ctx, db)
	}
	return err
}

type GenreORMWithBeforeDelete_ interface {
	BeforeDelete_(context.Context, *gorm1.DB) (*gorm1.DB, error)
}
type GenreORMWithAfterDelete_ interface {
	AfterDelete_(context.Context, *gorm1.DB) error
}

func DefaultDeleteGenreSet(ctx context.Context, in []*Genre, db *gorm1.DB) error {
	if in == nil {
		return errors1.NilArgumentError
	}
	var err error
	keys := []int32{}
	for _, obj := range in {
		ormObj, err := obj.ToORM(ctx)
		if err != nil {
			return err
		}
		if ormObj.Id == 0 {
			return errors1.EmptyIdError
		}
		keys = append(keys, ormObj.Id)
	}
	if hook, ok := (interface{}(&GenreORM{})).(GenreORMWithBeforeDeleteSet); ok {
		if db, err = hook.BeforeDeleteSet(ctx, in, db); err != nil {
			return err
		}
	}
	err = db.Where("id in (?)", keys).Delete(&GenreORM{}).Error
	if err != nil {
		return err
	}
	if hook, ok := (interface{}(&GenreORM{})).(GenreORMWithAfterDeleteSet); ok {
		err = hook.AfterDeleteSet(ctx, in, db)
	}
	return err
}

type GenreORMWithBeforeDeleteSet interface {
	BeforeDeleteSet(context.Context, []*Genre, *gorm1.DB) (*gorm1.DB, error)
}
type GenreORMWithAfterDeleteSet interface {
	AfterDeleteSet(context.Context, []*Genre, *gorm1.DB) error
}

// DefaultStrictUpdateGenre clears / replaces / appends first level 1:many children and then executes a gorm update call
func DefaultStrictUpdateGenre(ctx context.Context, in *Genre, db *gorm1.DB) (*Genre, error) {
	if in == nil {
		return nil, fmt.Errorf("Nil argument to DefaultStrictUpdateGenre")
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	lockedRow := &GenreORM{}
	db.Model(&ormObj).Set("gorm:query_option", "FOR UPDATE").Where("id=?", ormObj.Id).First(lockedRow)
	if hook, ok := interface{}(&ormObj).(GenreORMWithBeforeStrictUpdateCleanup); ok {
		if db, err = hook.BeforeStrictUpdateCleanup(ctx, db); err != nil {
			return nil, err
		}
	}
	if hook, ok := interface{}(&ormObj).(GenreORMWithBeforeStrictUpdateSave); ok {
		if db, err = hook.BeforeStrictUpdateSave(ctx, db); err != nil {
			return nil, err
		}
	}
	if err = db.Save(&ormObj).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(GenreORMWithAfterStrictUpdateSave); ok {
		if err = hook.AfterStrictUpdateSave(ctx, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := ormObj.ToPB(ctx)
	if err != nil {
		return nil, err
	}
	return &pbResponse, err
}

type GenreORMWithBeforeStrictUpdateCleanup interface {
	BeforeStrictUpdateCleanup(context.Context, *gorm1.DB) (*gorm1.DB, error)
}
type GenreORMWithBeforeStrictUpdateSave interface {
	BeforeStrictUpdateSave(context.Context, *gorm1.DB) (*gorm1.DB, error)
}
type GenreORMWithAfterStrictUpdateSave interface {
	AfterStrictUpdateSave(context.Context, *gorm1.DB) error
}

// DefaultPatchGenre executes a basic gorm update call with patch behavior
func DefaultPatchGenre(ctx context.Context, in *Genre, updateMask *field_mask1.FieldMask, db *gorm1.DB) (*Genre, error) {
	if in == nil {
		return nil, errors1.NilArgumentError
	}
	var pbObj Genre
	var err error
	if hook, ok := interface{}(&pbObj).(GenreWithBeforePatchRead); ok {
		if db, err = hook.BeforePatchRead(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	pbReadRes, err := DefaultReadGenre(ctx, &Genre{Id: in.GetId()}, db)
	if err != nil {
		return nil, err
	}
	pbObj = *pbReadRes
	if hook, ok := interface{}(&pbObj).(GenreWithBeforePatchApplyFieldMask); ok {
		if db, err = hook.BeforePatchApplyFieldMask(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	if _, err := DefaultApplyFieldMaskGenre(ctx, &pbObj, in, updateMask, "", db); err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&pbObj).(GenreWithBeforePatchSave); ok {
		if db, err = hook.BeforePatchSave(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := DefaultStrictUpdateGenre(ctx, &pbObj, db)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(pbResponse).(GenreWithAfterPatchSave); ok {
		if err = hook.AfterPatchSave(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	return pbResponse, nil
}

type GenreWithBeforePatchRead interface {
	BeforePatchRead(context.Context, *Genre, *field_mask1.FieldMask, *gorm1.DB) (*gorm1.DB, error)
}
type GenreWithBeforePatchApplyFieldMask interface {
	BeforePatchApplyFieldMask(context.Context, *Genre, *field_mask1.FieldMask, *gorm1.DB) (*gorm1.DB, error)
}
type GenreWithBeforePatchSave interface {
	BeforePatchSave(context.Context, *Genre, *field_mask1.FieldMask, *gorm1.DB) (*gorm1.DB, error)
}
type GenreWithAfterPatchSave interface {
	AfterPatchSave(context.Context, *Genre, *field_mask1.FieldMask, *gorm1.DB) error
}

// DefaultPatchSetGenre executes a bulk gorm update call with patch behavior
func DefaultPatchSetGenre(ctx context.Context, objects []*Genre, updateMasks []*field_mask1.FieldMask, db *gorm1.DB) ([]*Genre, error) {
	if len(objects) != len(updateMasks) {
		return nil, fmt.Errorf(errors1.BadRepeatedFieldMaskTpl, len(updateMasks), len(objects))
	}

	results := make([]*Genre, 0, len(objects))
	for i, patcher := range objects {
		pbResponse, err := DefaultPatchGenre(ctx, patcher, updateMasks[i], db)
		if err != nil {
			return nil, err
		}

		results = append(results, pbResponse)
	}

	return results, nil
}

// DefaultApplyFieldMaskGenre patches an pbObject with patcher according to a field mask.
func DefaultApplyFieldMaskGenre(ctx context.Context, patchee *Genre, patcher *Genre, updateMask *field_mask1.FieldMask, prefix string, db *gorm1.DB) (*Genre, error) {
	if patcher == nil {
		return nil, nil
	} else if patchee == nil {
		return nil, errors1.NilArgumentError
	}
	var err error
	for _, f := range updateMask.Paths {
		if f == prefix+"Id" {
			patchee.Id = patcher.Id
			continue
		}
		if f == prefix+"Name" {
			patchee.Name = patcher.Name
			continue
		}
	}
	if err != nil {
		return nil, err
	}
	return patchee, nil
}

// DefaultListGenre executes a gorm list call
func DefaultListGenre(ctx context.Context, db *gorm1.DB) ([]*Genre, error) {
	in := Genre{}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(GenreORMWithBeforeListApplyQuery); ok {
		if db, err = hook.BeforeListApplyQuery(ctx, db); err != nil {
			return nil, err
		}
	}
	db, err = gorm2.ApplyCollectionOperators(ctx, db, &GenreORM{}, &Genre{}, nil, nil, nil, nil)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(GenreORMWithBeforeListFind); ok {
		if db, err = hook.BeforeListFind(ctx, db); err != nil {
			return nil, err
		}
	}
	db = db.Where(&ormObj)
	db = db.Order("id")
	ormResponse := []GenreORM{}
	if err := db.Find(&ormResponse).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(GenreORMWithAfterListFind); ok {
		if err = hook.AfterListFind(ctx, db, &ormResponse); err != nil {
			return nil, err
		}
	}
	pbResponse := []*Genre{}
	for _, responseEntry := range ormResponse {
		temp, err := responseEntry.ToPB(ctx)
		if err != nil {
			return nil, err
		}
		pbResponse = append(pbResponse, &temp)
	}
	return pbResponse, nil
}

type GenreORMWithBeforeListApplyQuery interface {
	BeforeListApplyQuery(context.Context, *gorm1.DB) (*gorm1.DB, error)
}
type GenreORMWithBeforeListFind interface {
	BeforeListFind(context.Context, *gorm1.DB) (*gorm1.DB, error)
}
type GenreORMWithAfterListFind interface {
	AfterListFind(context.Context, *gorm1.DB, *[]GenreORM) error
}

// DefaultCreateBook executes a basic gorm create call
func DefaultCreateBook(ctx context.Context, in *Book, db *gorm1.DB) (*Book, error) {
	if in == nil {
		return nil, errors1.NilArgumentError
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(BookORMWithBeforeCreate_); ok {
		if db, err = hook.BeforeCreate_(ctx, db); err != nil {
			return nil, err
		}
	}
	if err = db.Create(&ormObj).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(BookORMWithAfterCreate_); ok {
		if err = hook.AfterCreate_(ctx, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := ormObj.ToPB(ctx)
	return &pbResponse, err
}

type BookORMWithBeforeCreate_ interface {
	BeforeCreate_(context.Context, *gorm1.DB) (*gorm1.DB, error)
}
type BookORMWithAfterCreate_ interface {
	AfterCreate_(context.Context, *gorm1.DB) error
}

// DefaultReadBook executes a basic gorm read call
func DefaultReadBook(ctx context.Context, in *Book, db *gorm1.DB) (*Book, error) {
	if in == nil {
		return nil, errors1.NilArgumentError
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	if ormObj.Id == 0 {
		return nil, errors1.EmptyIdError
	}
	if hook, ok := interface{}(&ormObj).(BookORMWithBeforeReadApplyQuery); ok {
		if db, err = hook.BeforeReadApplyQuery(ctx, db); err != nil {
			return nil, err
		}
	}
	if db, err = gorm2.ApplyFieldSelection(ctx, db, nil, &BookORM{}); err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(BookORMWithBeforeReadFind); ok {
		if db, err = hook.BeforeReadFind(ctx, db); err != nil {
			return nil, err
		}
	}
	ormResponse := BookORM{}
	if err = db.Where(&ormObj).First(&ormResponse).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormResponse).(BookORMWithAfterReadFind); ok {
		if err = hook.AfterReadFind(ctx, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := ormResponse.ToPB(ctx)
	return &pbResponse, err
}

type BookORMWithBeforeReadApplyQuery interface {
	BeforeReadApplyQuery(context.Context, *gorm1.DB) (*gorm1.DB, error)
}
type BookORMWithBeforeReadFind interface {
	BeforeReadFind(context.Context, *gorm1.DB) (*gorm1.DB, error)
}
type BookORMWithAfterReadFind interface {
	AfterReadFind(context.Context, *gorm1.DB) error
}

func DefaultDeleteBook(ctx context.Context, in *Book, db *gorm1.DB) error {
	if in == nil {
		return errors1.NilArgumentError
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return err
	}
	if ormObj.Id == 0 {
		return errors1.EmptyIdError
	}
	if hook, ok := interface{}(&ormObj).(BookORMWithBeforeDelete_); ok {
		if db, err = hook.BeforeDelete_(ctx, db); err != nil {
			return err
		}
	}
	err = db.Where(&ormObj).Delete(&BookORM{}).Error
	if err != nil {
		return err
	}
	if hook, ok := interface{}(&ormObj).(BookORMWithAfterDelete_); ok {
		err = hook.AfterDelete_(ctx, db)
	}
	return err
}

type BookORMWithBeforeDelete_ interface {
	BeforeDelete_(context.Context, *gorm1.DB) (*gorm1.DB, error)
}
type BookORMWithAfterDelete_ interface {
	AfterDelete_(context.Context, *gorm1.DB) error
}

func DefaultDeleteBookSet(ctx context.Context, in []*Book, db *gorm1.DB) error {
	if in == nil {
		return errors1.NilArgumentError
	}
	var err error
	keys := []int32{}
	for _, obj := range in {
		ormObj, err := obj.ToORM(ctx)
		if err != nil {
			return err
		}
		if ormObj.Id == 0 {
			return errors1.EmptyIdError
		}
		keys = append(keys, ormObj.Id)
	}
	if hook, ok := (interface{}(&BookORM{})).(BookORMWithBeforeDeleteSet); ok {
		if db, err = hook.BeforeDeleteSet(ctx, in, db); err != nil {
			return err
		}
	}
	err = db.Where("id in (?)", keys).Delete(&BookORM{}).Error
	if err != nil {
		return err
	}
	if hook, ok := (interface{}(&BookORM{})).(BookORMWithAfterDeleteSet); ok {
		err = hook.AfterDeleteSet(ctx, in, db)
	}
	return err
}

type BookORMWithBeforeDeleteSet interface {
	BeforeDeleteSet(context.Context, []*Book, *gorm1.DB) (*gorm1.DB, error)
}
type BookORMWithAfterDeleteSet interface {
	AfterDeleteSet(context.Context, []*Book, *gorm1.DB) error
}

// DefaultStrictUpdateBook clears / replaces / appends first level 1:many children and then executes a gorm update call
func DefaultStrictUpdateBook(ctx context.Context, in *Book, db *gorm1.DB) (*Book, error) {
	if in == nil {
		return nil, fmt.Errorf("Nil argument to DefaultStrictUpdateBook")
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	lockedRow := &BookORM{}
	db.Model(&ormObj).Set("gorm:query_option", "FOR UPDATE").Where("id=?", ormObj.Id).First(lockedRow)
	if hook, ok := interface{}(&ormObj).(BookORMWithBeforeStrictUpdateCleanup); ok {
		if db, err = hook.BeforeStrictUpdateCleanup(ctx, db); err != nil {
			return nil, err
		}
	}
	if hook, ok := interface{}(&ormObj).(BookORMWithBeforeStrictUpdateSave); ok {
		if db, err = hook.BeforeStrictUpdateSave(ctx, db); err != nil {
			return nil, err
		}
	}
	if err = db.Save(&ormObj).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(BookORMWithAfterStrictUpdateSave); ok {
		if err = hook.AfterStrictUpdateSave(ctx, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := ormObj.ToPB(ctx)
	if err != nil {
		return nil, err
	}
	return &pbResponse, err
}

type BookORMWithBeforeStrictUpdateCleanup interface {
	BeforeStrictUpdateCleanup(context.Context, *gorm1.DB) (*gorm1.DB, error)
}
type BookORMWithBeforeStrictUpdateSave interface {
	BeforeStrictUpdateSave(context.Context, *gorm1.DB) (*gorm1.DB, error)
}
type BookORMWithAfterStrictUpdateSave interface {
	AfterStrictUpdateSave(context.Context, *gorm1.DB) error
}

// DefaultPatchBook executes a basic gorm update call with patch behavior
func DefaultPatchBook(ctx context.Context, in *Book, updateMask *field_mask1.FieldMask, db *gorm1.DB) (*Book, error) {
	if in == nil {
		return nil, errors1.NilArgumentError
	}
	var pbObj Book
	var err error
	if hook, ok := interface{}(&pbObj).(BookWithBeforePatchRead); ok {
		if db, err = hook.BeforePatchRead(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	pbReadRes, err := DefaultReadBook(ctx, &Book{Id: in.GetId()}, db)
	if err != nil {
		return nil, err
	}
	pbObj = *pbReadRes
	if hook, ok := interface{}(&pbObj).(BookWithBeforePatchApplyFieldMask); ok {
		if db, err = hook.BeforePatchApplyFieldMask(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	if _, err := DefaultApplyFieldMaskBook(ctx, &pbObj, in, updateMask, "", db); err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&pbObj).(BookWithBeforePatchSave); ok {
		if db, err = hook.BeforePatchSave(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := DefaultStrictUpdateBook(ctx, &pbObj, db)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(pbResponse).(BookWithAfterPatchSave); ok {
		if err = hook.AfterPatchSave(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	return pbResponse, nil
}

type BookWithBeforePatchRead interface {
	BeforePatchRead(context.Context, *Book, *field_mask1.FieldMask, *gorm1.DB) (*gorm1.DB, error)
}
type BookWithBeforePatchApplyFieldMask interface {
	BeforePatchApplyFieldMask(context.Context, *Book, *field_mask1.FieldMask, *gorm1.DB) (*gorm1.DB, error)
}
type BookWithBeforePatchSave interface {
	BeforePatchSave(context.Context, *Book, *field_mask1.FieldMask, *gorm1.DB) (*gorm1.DB, error)
}
type BookWithAfterPatchSave interface {
	AfterPatchSave(context.Context, *Book, *field_mask1.FieldMask, *gorm1.DB) error
}

// DefaultPatchSetBook executes a bulk gorm update call with patch behavior
func DefaultPatchSetBook(ctx context.Context, objects []*Book, updateMasks []*field_mask1.FieldMask, db *gorm1.DB) ([]*Book, error) {
	if len(objects) != len(updateMasks) {
		return nil, fmt.Errorf(errors1.BadRepeatedFieldMaskTpl, len(updateMasks), len(objects))
	}

	results := make([]*Book, 0, len(objects))
	for i, patcher := range objects {
		pbResponse, err := DefaultPatchBook(ctx, patcher, updateMasks[i], db)
		if err != nil {
			return nil, err
		}

		results = append(results, pbResponse)
	}

	return results, nil
}

// DefaultApplyFieldMaskBook patches an pbObject with patcher according to a field mask.
func DefaultApplyFieldMaskBook(ctx context.Context, patchee *Book, patcher *Book, updateMask *field_mask1.FieldMask, prefix string, db *gorm1.DB) (*Book, error) {
	if patcher == nil {
		return nil, nil
	} else if patchee == nil {
		return nil, errors1.NilArgumentError
	}
	var err error
	for _, f := range updateMask.Paths {
		if f == prefix+"Id" {
			patchee.Id = patcher.Id
			continue
		}
		if f == prefix+"Name" {
			patchee.Name = patcher.Name
			continue
		}
		if f == prefix+"Price" {
			patchee.Price = patcher.Price
			continue
		}
		if f == prefix+"Genre" {
			patchee.Genre = patcher.Genre
			continue
		}
		if f == prefix+"Amount" {
			patchee.Amount = patcher.Amount
			continue
		}
	}
	if err != nil {
		return nil, err
	}
	return patchee, nil
}

// DefaultListBook executes a gorm list call
func DefaultListBook(ctx context.Context, db *gorm1.DB, f *query1.Filtering, s *query1.Sorting, p *query1.Pagination, fs *query1.FieldSelection) ([]*Book, error) {
	in := Book{}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(BookORMWithBeforeListApplyQuery); ok {
		if db, err = hook.BeforeListApplyQuery(ctx, db, f, s, p, fs); err != nil {
			return nil, err
		}
	}
	db, err = gorm2.ApplyCollectionOperators(ctx, db, &BookORM{}, &Book{}, f, s, p, fs)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(BookORMWithBeforeListFind); ok {
		if db, err = hook.BeforeListFind(ctx, db, f, s, p, fs); err != nil {
			return nil, err
		}
	}
	db = db.Where(&ormObj)
	db = db.Order("id")
	ormResponse := []BookORM{}
	if err := db.Find(&ormResponse).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(BookORMWithAfterListFind); ok {
		if err = hook.AfterListFind(ctx, db, &ormResponse, f, s, p, fs); err != nil {
			return nil, err
		}
	}
	pbResponse := []*Book{}
	for _, responseEntry := range ormResponse {
		temp, err := responseEntry.ToPB(ctx)
		if err != nil {
			return nil, err
		}
		pbResponse = append(pbResponse, &temp)
	}
	return pbResponse, nil
}

type BookORMWithBeforeListApplyQuery interface {
	BeforeListApplyQuery(context.Context, *gorm1.DB, *query1.Filtering, *query1.Sorting, *query1.Pagination, *query1.FieldSelection) (*gorm1.DB, error)
}
type BookORMWithBeforeListFind interface {
	BeforeListFind(context.Context, *gorm1.DB, *query1.Filtering, *query1.Sorting, *query1.Pagination, *query1.FieldSelection) (*gorm1.DB, error)
}
type BookORMWithAfterListFind interface {
	AfterListFind(context.Context, *gorm1.DB, *[]BookORM, *query1.Filtering, *query1.Sorting, *query1.Pagination, *query1.FieldSelection) error
}
type MyappDefaultServer struct {
}

// Create ...
func (m *MyappDefaultServer) Create(ctx context.Context, in *CreateBookRequest) (*CreateBookResponse, error) {
	out := &CreateBookResponse{}
	return out, nil
}

// Read ...
func (m *MyappDefaultServer) Read(ctx context.Context, in *ReadBookRequest) (*ReadBookResponse, error) {
	txn, ok := gorm2.FromContext(ctx)
	if !ok {
		return nil, errors1.NoTransactionError
	}
	db := txn.Begin()
	if db.Error != nil {
		return nil, db.Error
	}
	if custom, ok := interface{}(in).(MyappBookWithBeforeRead); ok {
		var err error
		if db, err = custom.BeforeRead(ctx, db); err != nil {
			return nil, err
		}
	}
	res, err := DefaultReadBook(ctx, &Book{Id: in.GetId()}, db)
	if err != nil {
		return nil, err
	}
	out := &ReadBookResponse{Result: res}
	if custom, ok := interface{}(in).(MyappBookWithAfterRead); ok {
		var err error
		if err = custom.AfterRead(ctx, out, db); err != nil {
			return nil, err
		}
	}
	return out, nil
}

// MyappBookWithBeforeRead called before DefaultReadBook in the default Read handler
type MyappBookWithBeforeRead interface {
	BeforeRead(context.Context, *gorm1.DB) (*gorm1.DB, error)
}

// MyappBookWithAfterRead called before DefaultReadBook in the default Read handler
type MyappBookWithAfterRead interface {
	AfterRead(context.Context, *ReadBookResponse, *gorm1.DB) error
}

// Update ...
func (m *MyappDefaultServer) Update(ctx context.Context, in *UpdateBookRequest) (*UpdateBookResponse, error) {
	var err error
	var res *Book
	txn, ok := gorm2.FromContext(ctx)
	if !ok {
		return nil, errors1.NoTransactionError
	}
	db := txn.Begin()
	if db.Error != nil {
		return nil, db.Error
	}
	if custom, ok := interface{}(in).(MyappBookWithBeforeUpdate); ok {
		var err error
		if db, err = custom.BeforeUpdate(ctx, db); err != nil {
			return nil, err
		}
	}
	res, err = DefaultStrictUpdateBook(ctx, in.GetPayload(), db)
	if err != nil {
		return nil, err
	}
	out := &UpdateBookResponse{Result: res}
	if custom, ok := interface{}(in).(MyappBookWithAfterUpdate); ok {
		var err error
		if err = custom.AfterUpdate(ctx, out, db); err != nil {
			return nil, err
		}
	}
	return out, nil
}

// MyappBookWithBeforeUpdate called before DefaultUpdateBook in the default Update handler
type MyappBookWithBeforeUpdate interface {
	BeforeUpdate(context.Context, *gorm1.DB) (*gorm1.DB, error)
}

// MyappBookWithAfterUpdate called before DefaultUpdateBook in the default Update handler
type MyappBookWithAfterUpdate interface {
	AfterUpdate(context.Context, *UpdateBookResponse, *gorm1.DB) error
}

// List ...
func (m *MyappDefaultServer) List(ctx context.Context, in *ListBookRequest) (*ListBookResponse, error) {
	txn, ok := gorm2.FromContext(ctx)
	if !ok {
		return nil, errors1.NoTransactionError
	}
	db := txn.Begin()
	if db.Error != nil {
		return nil, db.Error
	}
	if custom, ok := interface{}(in).(MyappBookWithBeforeList); ok {
		var err error
		if db, err = custom.BeforeList(ctx, db); err != nil {
			return nil, err
		}
	}
	pagedRequest := false
	if in.GetPaging().GetLimit() >= 1 {
		in.Paging.Limit++
		pagedRequest = true
	}
	res, err := DefaultListBook(ctx, db, in.Filter, in.OrderBy, in.Paging, in.Fields)
	if err != nil {
		return nil, err
	}
	var resPaging *query1.PageInfo
	if pagedRequest {
		var offset int32
		var size int32 = int32(len(res))
		if size == in.GetPaging().GetLimit() {
			size--
			res = res[:size]
			offset = in.GetPaging().GetOffset() + size
		}
		resPaging = &query1.PageInfo{Offset: offset}
	}
	out := &ListBookResponse{Results: res, Page: resPaging}
	if custom, ok := interface{}(in).(MyappBookWithAfterList); ok {
		var err error
		if err = custom.AfterList(ctx, out, db); err != nil {
			return nil, err
		}
	}
	return out, nil
}

// MyappBookWithBeforeList called before DefaultListBook in the default List handler
type MyappBookWithBeforeList interface {
	BeforeList(context.Context, *gorm1.DB) (*gorm1.DB, error)
}

// MyappBookWithAfterList called before DefaultListBook in the default List handler
type MyappBookWithAfterList interface {
	AfterList(context.Context, *ListBookResponse, *gorm1.DB) error
}

// GetVersion ...
func (m *MyappDefaultServer) GetVersion(ctx context.Context, in *google_protobuf.Empty) (*VersionResponse, error) {
	out := &VersionResponse{}
	return out, nil
}

// Delete ...
func (m *MyappDefaultServer) Delete(ctx context.Context, in *DeleteBookRequest) (*DeleteBookResponse, error) {
	txn, ok := gorm2.FromContext(ctx)
	if !ok {
		return nil, errors1.NoTransactionError
	}
	db := txn.Begin()
	if db.Error != nil {
		return nil, db.Error
	}
	if custom, ok := interface{}(in).(MyappBookWithBeforeDelete); ok {
		var err error
		if db, err = custom.BeforeDelete(ctx, db); err != nil {
			return nil, err
		}
	}
	err := DefaultDeleteBook(ctx, &Book{Id: in.GetId()}, db)
	if err != nil {
		return nil, err
	}
	out := &DeleteBookResponse{}
	if custom, ok := interface{}(in).(MyappBookWithAfterDelete); ok {
		var err error
		if err = custom.AfterDelete(ctx, out, db); err != nil {
			return nil, err
		}
	}
	return out, nil
}

// MyappBookWithBeforeDelete called before DefaultDeleteBook in the default Delete handler
type MyappBookWithBeforeDelete interface {
	BeforeDelete(context.Context, *gorm1.DB) (*gorm1.DB, error)
}

// MyappBookWithAfterDelete called before DefaultDeleteBook in the default Delete handler
type MyappBookWithAfterDelete interface {
	AfterDelete(context.Context, *DeleteBookResponse, *gorm1.DB) error
}
